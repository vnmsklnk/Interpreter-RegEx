{

// Opens methods related to fslex.exe
open FSharp.Text.Lexing

let newline (lexbuf: LexBuffer<_>) =
  lexbuf.StartPos <- lexbuf.StartPos.NextLine

let lexeme x =
    let s = LexBuffer<_>.LexemeString x
    s.Substring(1, s.Length - 2)
}

// Regular expressions
let whitespace = [' ' '\t' ]
let newline = ('\n' | '\r' '\n')

let smb = ['a'-'z' 'A'-'Z' '0'-'9' '-' '.' '/' '+' '~' ';']

let str = '"' smb* '"'
let vname = '[' ['a'-'z' 'A'-'Z']+ ['0'-'9']* ']'

rule tokenStream = parse
// --------------------------
| smb 		{ Parser.SMB(char (lexbuf.Lexeme).[0]) }
// --------------------------
| whitespace	{ tokenStream lexbuf }
| newline	{ tokenStream lexbuf }
//---------------------------
| '(' {Parser.LBR}
| ')' {Parser.RBR}
| '*' {Parser.STAR}
| '|' {Parser.ALT}
| '?' {Parser.OPT}
| '&' {Parser.AMP}
| '=' {Parser.EQ}
| vname {Parser.VNAME(lexeme lexbuf)}
| "let" {Parser.KW_LET}
| "print" {Parser.KW_PRINT}
| "findAll" {Parser.KW_FIND_ALL}
| "printToDot" {Parser.KW_PRINT_TO_DOT}
| "isAcceptable" {Parser.KW_IS_ACCEPTABLE}
| str {Parser.STR(lexeme lexbuf)}
// --------------------------
| _    		{ failwith ("Lexer error. Unexpected symbol: " + LexBuffer<_>.LexemeString lexbuf) }
| eof   	{ Parser.EOF }